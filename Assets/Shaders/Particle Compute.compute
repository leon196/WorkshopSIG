#pragma kernel particle

#include "UnityCG.cginc"
#include "common.cginc"

struct ParticleData { float3 position, velocity, seed; };

RWStructuredBuffer<ParticleData> _Particles;

uniform float _Count, _Radius, _TimeElapsed, _TimeDelta, _Speed, _Friction, _NoiseScale, _BlendCurl, _BlendGravity, _BlendTarget;
uniform float3 _Target;
uniform float4x4 _MatrixWorld, _MatrixLocal;


[numthreads(8,1,1)]
void particle (uint3 id : SV_DispatchThreadID)
{
	ParticleData particle = _Particles[id.x];
	float3 position = particle.position;
	float3 velocity = particle.velocity;
	float3 target = mul(_MatrixLocal, float4(_Target, 1)).xyz;
	float3 offset = float3(0,0,0);

	float3 follow = float3(0,0,0);
	float3 avoid = float3(0,0,0);
	float collideRadius = .5;
	float followRadius = .3;
	for (float index = _Count; index > 0.0; --index) {
		float3 other = _Particles[index].position;
		float dist = length(position - other);
		if (dist > .01) {
			float3 dir = normalize(position - other);
			avoid += dir * smoothstep(collideRadius*2., collideRadius, dist) / dist;
			follow += _Particles[index].velocity * smoothstep(followRadius*2., followRadius, dist) / dist;
		}
	}
	offset += avoid * .1;
	offset += follow * .1;

	// Curl 
	float3 seed = position * _NoiseScale + particle.seed;
	rotation2D(seed.xz, _TimeElapsed*.01);
	rotation2D(seed.yz, _TimeElapsed*.05);
	float salty = noiseIQ(seed)*2.-1.;
	float sweety = noiseIQ(seed+float3(1.64,5.579,9.5468))*2.-1.;
	float curry = noiseIQ(seed+float3(524.5687,95.546,481.5498))*2.-1.;
	offset += float3(salty, curry, sweety) * _BlendCurl;

	// Gravity
	offset.y += _BlendGravity;

	// Go to target
	float l = length(target-position);
	if (l > .01) {
		offset += normalize(target-position) * smoothstep(.0, .1, l) * _BlendTarget;
	}

	velocity = velocity * _Friction + offset * _Speed * _TimeDelta;
	position += velocity;

	_Particles[id.x].velocity = velocity;
	_Particles[id.x].position = position;
}
